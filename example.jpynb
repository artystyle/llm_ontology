{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Онтологический анализатор нормативных документов\n",
    "## Генерация и оценка онтологий с использованием LLM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Установка зависимостей\n",
    "!pip install owlready2 openai scikit-learn matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "from IPython.display import display, Markdown\n",
    "import matplotlib.pyplot as plt\n",
    "import owlready2\n",
    "from owlready2 import *\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\", category=UserWarning)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Подготовка тестовых данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "law_text = \"\"\"\n",
    "Закон о персональных данных\n",
    "\n",
    "Статья 1. Основные понятия\n",
    "1. Персональные данные - любая информация, относящаяся к прямо или косвенно определенному физическому лицу.\n",
    "2. Оператор - государственный орган, юридическое лицо, обрабатывающее персональные данные.\n",
    "\n",
    "Статья 2. Принципы обработки\n",
    "1. Обработка должна осуществляться на законной основе.\n",
    "2. Объем данных должен соответствовать заявленным целям.\n",
    "\n",
    "Статья 3. Права субъекта\n",
    "1. Субъект имеет право на доступ к своим данным.\n",
    "2. Субъект может требовать удаления данных.\n",
    "\"\"\"\n",
    "\n",
    "with open(\"test_law.txt\", \"w\", encoding=\"utf-8\") as f:\n",
    "    f.write(law_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Реализация классов системы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class OntologyGenerator:\n",
    "    def __init__(self, llm_model=\"gpt-3.5-turbo\"):\n",
    "        self.llm_model = llm_model\n",
    "        \n",
    "    def generate_from_text(self, text, domain):\n",
    "        # Упрощенная реализация для демонстрации\n",
    "        onto = get_ontology(f\"http://example.com/{domain}.owl\")\n",
    "        \n",
    "        with onto:\n",
    "            class ПерсональныеДанные(Thing): pass\n",
    "            class Оператор(Thing): pass\n",
    "            class СубъектДанных(Thing): pass\n",
    "            \n",
    "            class обрабатывает(ObjectProperty):\n",
    "                domain = [Оператор]\n",
    "                range = [ПерсональныеДанные]\n",
    "                \n",
    "            class имеет(ObjectProperty):\n",
    "                domain = [СубъектДанных]\n",
    "                range = [ПерсональныеДанные]\n",
    "        \n",
    "        return onto"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class OntologyEvaluator:\n",
    "    def __init__(self, ontology_path):\n",
    "        self.ontology = get_ontology(ontology_path).load()\n",
    "        \n",
    "    def calculate_cq_coverage(self, cq_list, answered_cq):\n",
    "        return len(answered_cq) / len(cq_list)\n",
    "    \n",
    "    def visualize_hierarchy(self):\n",
    "        plt.figure(figsize=(8, 4))\n",
    "        \n",
    "        classes = list(self.ontology.classes())\n",
    "        hierarchy = {}\n",
    "        \n",
    "        for cls in classes:\n",
    "            parents = [p.name for p in cls.is_a if isinstance(p, ThingClass)]\n",
    "            hierarchy[cls.name] = parents\n",
    "        \n",
    "        # Простая визуализация\n",
    "        for i, (cls, parents) in enumerate(hierarchy.items()):\n",
    "            plt.text(i, 0, cls, ha='center', va='center', \n",
    "                    bbox=dict(facecolor='lightblue', alpha=0.5))\n",
    "            for parent in parents:\n",
    "                if parent in hierarchy:\n",
    "                    j = list(hierarchy.keys()).index(parent)\n",
    "                    plt.plot([i, j], [0, 1], 'k-')\n",
    "        \n",
    "        plt.axis('off')\n",
    "        plt.title(\"Иерархия классов онтологии\")\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Генерация онтологии"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "generator = OntologyGenerator()\n",
    "ontology = generator.generate_from_text(law_text, \"privacy_law\")\n",
    "ontology.save(file=\"privacy_law.owl\", format=\"rdfxml\")\n",
    "\n",
    "display(Markdown(\"### Сгенерированные классы:\"))\n",
    "for cls in ontology.classes():\n",
    "    display(Markdown(f\"- {cls.name}\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Визуализация онтологии"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "evaluator = OntologyEvaluator(\"privacy_law.owl\")\n",
    "evaluator.visualize_hierarchy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Оценка качества"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cq_list = [\n",
    "    \"Какие сущности обрабатывают персональные данные?\",\n",
    "    \"Какие права есть у субъекта данных?\"\n",
    "]\n",
    "\n",
    "coverage = evaluator.calculate_cq_coverage(cq_list, cq_list[:1])\n",
    "\n",
    "plt.bar(['Покрытие CQ'], [coverage], color=['lightgreen'])\n",
    "plt.ylim(0, 1)\n",
    "plt.title(\"Оценка покрытия компетентных вопросов\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Экспорт результатов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "report = {\n",
    "    \"metrics\": {\n",
    "        \"cq_coverage\": coverage,\n",
    "        \"classes_count\": len(list(ontology.classes()))\n",
    "    },\n",
    "    \"recommendations\": [\n",
    "        \"Добавить больше отношений между классами\",\n",
    "        \"Увеличить покрытие CQ\"\n",
    "    ]\n",
    "}\n",
    "\n",
    "with open(\"ontology_report.json\", \"w\", encoding=\"utf-8\") as f:\n",
    "    json.dump(report, f, ensure_ascii=False, indent=2)\n",
    "\n",
    "display(Markdown(\"### Отчет сохранен в `ontology_report.json`\"))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
